# 한글 _ 이미지 분류기 (CNN)-가 ~ 하 14글자

1.모델 생성배경
  - 머신러닝, 딥러닝을 학습하다 보면 대부분의 학습교재, 서적의 예제 데이터가 MNIST, CIFAR10 등의 외국 데이터를 이용
  - 한글 이미지를 통해 한글 이미지를 분류 할 수 있는 예제를 만들고자 모델 생성계획
 
2.데이터 출처 
  - 전자정보연구정보센터(https://www.eiric.or.kr/)에서 협조를 구하여 2350자의 상용한글 이미지 데이터를 획득
  - 데이터는 동일한 크기가 아니며 150~160 * 150~160 크기로 이루어진 grayscale 이미지로 한 글자당 약 150개의 이미지
  - 저작권 문제로 깃허브에 이미지 파일을 올려 놓지 못하였음

3.모델 생성계획
  1) 데이터 획득 및 모델 베이스라인 구축(CNN)
  2) 모델 베이스라인 성능을 확인 후, 데이터 전처리 수행
  3) 데이터 전처리 후, 모델 수정 및 하이퍼 파라미터 최적값 탐색
  4) Test loss 및 Accuracy 확인과 실제 작동여부 확인 
  
 4.진행과정
  1)데이터를 단순히 7:3 비율로 분배 후, 이미지의 사이즈를 일괄적으로 resize(100, 100)을 진행 하였고 
   (컨볼루션 -> 풀링)*2 -> 드롭아웃 -> 풀링 -> 신경망 -> 드롭아웃 -> 신경망으로 구성하였음. loss는 CrossEntropy, 
    optimizer는 SGD를 이용하였고 출력값은 각 클래스의 확률을 나타내는 log_softmax를 이용
    -> 이때의 정확도는 33%정도로 낮은 성능이고, 분석환경이 개인 노트북을 이용하여 결과확인이 원활하지 않음.
    => 데이터 전처리 수행 계획 수립 및 열악한 분석환경으로 인하여 데이터를 가~하 14글자로 변경 
    
  2)데이터 전처리 실시 - 데이터의 평균과 표준편차를 구해서 Normalization 실시. 데이터 양이 너무 적다고 생각하여 
                       같은 데이터를 복사하여 무작위하게 pytorch의 transform에서 augmentation수행 (Randomrotation, Affine)
                       추가적으로 학습속도를 빠르게 하기 위하여 30*30사이즈로 resize 수행
    optimizer를 SGD에서 Adam(Adagrad와 momentum의 장점을 합침)으로 변경
    -> 정확도는 약 50%정도로 17%정도 상승하였지만 아직도 많이 부족하다고 판단. 다른 성능향상 방법 적용 필요
    => optimizer의 learning rate, conv계층의 채널 수의변경 등의 하이퍼파라미터 최적값 탐색 계획
    
   3)하이퍼파라미터 최적값 탐색 - learning rate를 로그 스케일로 0.1~0.00001의 변동에 따른 성능 확인. 가장 좋은 성능을 나타내는 0.001이 
                                가장 낮은 성능을 내는 0.1보다 약 6% 정확도가 높았음
                              - conv계층의 채널 수는 채널의 변동에 1~2%정도의 차이로 큰 변화가 없음을 확인 
                              - 학습 진행시 EPOCH마다 learning rate를 조절하는 pytorch의 lr_scheduler를 이용했지만 유의미한 정확도 변동
                                없음을 확인
    -> 최종 정확도는 약 60%로 성능향상은 이루어졌지만, 유의미한 변동은 아니라고 판단
    => 기존의 2계층으로 구성한 이유가 자음, 모음으로 구성되어 있어 2개의 특징이 추출이 될것이라 추측하였는데, 컨볼루션 계층을 늘려 성능을 
       확인해보고자 계획함.
       
   4)컨볼루션 계층 추가 - 기존 2계층에서 컨볼루션 계층을 하나씩 추가하여 이미지의 특징을 더욱 많이 추출하는 것이 성능에 도움이 될 수 있다고 판단
                        (기존 자음 + 모음의 특징만 추출하는 것이 아닌 자음의 형태에 따른 특징 수집, 모음의 형태에 따른 특징이 추출 될 수도 있다 
                          판단하여 진행 )
                       - 이미지의 특징을 원활하게 추출하기 위하여 resize 60*60을 통해서 이미지의 크기를 변동시키고 
                         컨볼루션계층(Conv - pool - ReLU)을 하나 추가 시켜 성능 확인 시, 정확도가 약 70%까지 향상
                       - 정확도 향상이라는 결과로 컨볼루션 계층을 하나씩 추가해보고, 인공신경망 계층을 추가해보고 하였지만, 
                         인공신경망 계층의 추가는 유의미한 결과를 나타내지 않았고, 컨볼루션 계층의 추가는 기존 2계층에서 
                         4계층의 추가까지 유의미한 정확도 향상이 있었음 
     -> 최종정확도는 약 86%로 기존의 정확도 약33%에 비해서 매우 높은 성능향상이 있었다고 판단하고 실제 Test이미지로 결과를 확인했을때 
        만족할만한 결과가 나옴
     -> 이 프로젝트를 통하여 학습서에 나온 MNIST를 통한 예제같은 경우, 더 깊은 CNN설계시 성능의 차이가 미미한 것으로 파악하였는데, 
        어떤 종류의 이미지인가에 따라 적정 깊이의 컨볼루션계층을 구성하는 것이 필요하다는 것을 파악하였고, 이를 확인하기 위한 부분을
        알아봐야 한다는 새로운 과제가 생겼다. 또한 딥러닝 모델 설계시에 각 채널사이를 이동하는 tensor의 크기(차원)을 파악하는 좋은 기회였고,
        이 프로젝트는 pytorch 프레임워크를 이용하였지만 다음 프로젝트는 tensorflow를 이용해보고자 함
        
 *본 프로젝트의 데이터는 전자정보연구정보센터의 한글 이미지 파일로 수행되었으며, 저작권문제 때문에 
  이미지데이터를 업로드 하지 못하는 것을 다시 한번 상기시켜드리고 이미지 데이터를 제공해주신 
  전자정보연구정보세터의 관계자분들에게 감사의 말씀을 드립니다. 
  - 전자정보연구정보센터(https://www.eiric.or.kr/)
        
       
